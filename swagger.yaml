openapi: 3.0.3
info:
  title: Tile Order Management API
  description: |
    A comprehensive API for managing tile orders with price scraping, statistics, and search functionality.

    Features:
    - Price scraping from tile.expert
    - Order statistics with pagination
    - SOAP web service
    - Full-text search with Manticore
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: Price
    description: Tile price scraping operations
  - name: Orders
    description: Order management operations
  - name: Statistics
    description: Order statistics and analytics
  - name: Search
    description: Full-text search operations

paths:
  /api/price:
    get:
      tags:
        - Price
      summary: Get tile price from tile.expert
      description: Scrapes the price of a specific tile from tile.expert website
      operationId: getTilePrice
      parameters:
        - name: factory
          in: query
          required: true
          description: Factory/manufacturer name
          schema:
            type: string
            example: cobsa
        - name: collection
          in: query
          required: true
          description: Collection name
          schema:
            type: string
            example: manual
        - name: article
          in: query
          required: true
          description: Article number
          schema:
            type: string
            example: manu7530bcbm-manualbaltic7-5x30
      responses:
        '200':
          description: Price retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceResponse'
        '400':
          description: Missing required parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unable to fetch price from tile.expert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/orders/statistics:
    get:
      tags:
        - Statistics
      summary: Get order statistics
      description: Retrieve order statistics with pagination and grouping by day, month, or year
      operationId: getOrderStatistics
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: per_page
          in: query
          description: Items per page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: group_by
          in: query
          description: Grouping period
          schema:
            type: string
            enum: [day, month, year]
            default: month
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/orders:
    get:
      tags:
        - Orders
      summary: Get single order
      description: Retrieve a single order by ID
      operationId: getOrder
      parameters:
        - name: id
          in: query
          required: true
          description: Order ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/orders/search:
    get:
      tags:
        - Search
      summary: Search orders
      description: Full-text search across all order fields using Manticore Search
      operationId: searchOrders
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            example: john
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: per_page
          in: query
          description: Items per page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

  /soap:
    post:
      tags:
        - Orders
      summary: SOAP endpoint for creating orders
      description: |
        SOAP web service endpoint for creating new orders.

        **WSDL:** http://localhost:8080/soap?wsdl

        **Important:** Use the complete SOAP envelope in the request body below.

        **cURL Example:**
        ```bash
        curl -X POST http://localhost:8080/soap \
          -H "Content-Type: text/xml; charset=utf-8" \
          -d '<?xml version="1.0" encoding="UTF-8"?>
        <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tns="http://localhost:8080/soap">
          <soap:Body>
            <tns:createOrder>
              <customerName>John Doe</customerName>
              <customerEmail>john@example.com</customerEmail>
              <address>123 Main Street, New York</address>
              <totalAmount>299.99</totalAmount>
              <items>Ceramic Tile, Grout</items>
              <status>pending</status>
            </tns:createOrder>
          </soap:Body>
        </soap:Envelope>'
        ```
      operationId: soapCreateOrder
      requestBody:
        required: true
        content:
          text/xml:
            schema:
              type: string
            example: '<?xml version="1.0" encoding="UTF-8"?><soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tns="http://localhost:8080/soap"><soap:Body><tns:createOrder><customerName>John Doe</customerName><customerEmail>john@example.com</customerEmail><address>123 Main Street, New York, NY 10001</address><totalAmount>299.99</totalAmount><items>Ceramic Tile 30x60, Grout, Adhesive</items><status>pending</status></tns:createOrder></soap:Body></soap:Envelope>'
      responses:
        '200':
          description: SOAP response
          content:
            text/xml:
              schema:
                type: string
              example: '<?xml version="1.0" encoding="UTF-8"?><SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://localhost:8080/soap"><SOAP-ENV:Body><ns1:createOrderResponse><success>true</success><order_id>21</order_id><message>Order created successfully</message></ns1:createOrderResponse></SOAP-ENV:Body></SOAP-ENV:Envelope>'

components:
  schemas:
    PriceResponse:
      type: object
      properties:
        price:
          type: number
          format: float
          description: Price in euros
          example: 38.99
        factory:
          type: string
          description: Factory name
          example: cobsa
        collection:
          type: string
          description: Collection name
          example: manual
        article:
          type: string
          description: Article number
          example: manu7530bcbm-manualbaltic7-5x30
      required:
        - price
        - factory
        - collection
        - article

    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        date:
          type: string
          format: date-time
          example: "2024-01-15 10:30:00"
        customer_name:
          type: string
          example: John Doe
        customer_email:
          type: string
          format: email
          example: john@example.com
        address:
          type: string
          example: "123 Main St, New York, NY 10001"
        total_amount:
          type: number
          format: float
          example: 299.99
        items:
          type: string
          example: "Product A, Product B"
        status:
          type: string
          enum: [pending, processing, completed, cancelled, refunded]
          example: completed

    StatisticsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              period:
                type: string
                description: Time period (format depends on group_by parameter)
                example: "2024-10"
              count:
                type: integer
                description: Number of orders in this period
                example: 3
        pagination:
          $ref: '#/components/schemas/Pagination'
        group_by:
          type: string
          enum: [day, month, year]
          example: month

    SearchResponse:
      type: object
      properties:
        query:
          type: string
          description: Original search query
          example: john
        results:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              order_id:
                type: integer
              customer_name:
                type: string
              customer_email:
                type: string
              total_amount:
                type: number
              status:
                type: string
        pagination:
          type: object
          properties:
            page:
              type: integer
            per_page:
              type: integer

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        per_page:
          type: integer
          description: Items per page
          example: 10
        total_items:
          type: integer
          description: Total number of items
          example: 50
        total_pages:
          type: integer
          description: Total number of pages
          example: 5

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: Invalid order ID
